generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// User / Fan Models
// ---------------------------
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  role      UserRole  @default(FAN)
  likes     MixLike[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  RSVP      RSVP[]
  Account   Account[]
  Session   Session[]
}

enum UserRole {
  FAN
  DJ
  ADMIN
}

// ---------------------------
// Events
// ---------------------------
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  location    String
  date        DateTime
  flyerUrl    String?
  rsvps       RSVP[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

// ---------------------------
// Mixes / Music
// ---------------------------
model Mix {
  id        String    @id @default(cuid())
  title     String
  genre     String
  audioUrl  String
  premium   Boolean   @default(false)
  likes     MixLike[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

// ---------------------------
// Likes / Comments / RSVPs
// ---------------------------
model MixLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mix       Mix      @relation(fields: [mixId], references: [id])
  mixId     String
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mix       Mix?     @relation(fields: [mixId], references: [id])
  mixId     String?
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  content   String
  createdAt DateTime @default(now())
}

model RSVP {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  status  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
}
